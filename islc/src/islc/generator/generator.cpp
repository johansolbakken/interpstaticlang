#include "generator.h"

#include <sstream>
#include <fstream>

namespace islc
{
    Generator::Generator(const ControlFlowGraph &cfg, const std::string &filepath = "main.c")
        : m_cfg(cfg), m_filepath(filepath)
    {
    }

    void Generator::generate()
    {
        std::stringstream header;
        header << "// This file is generated by islc\n";
        header << "#include <stdio.h>\n";
        header << "#include <stdlib.h>\n";
        header << "#include <string.h>\n";
        header << "#include <stdbool.h>\n";
        header << "#include <stdint.h>\n";
        header << "#include <math.h>\n";
        header << "#include <time.h>\n";
        header << "#include <assert.h>\n";
        header << "\n";

        std::stringstream strings;
        uint32_t i = 0;
        for (const auto &string : m_cfg.stringList())
        {
            strings << "char *string_" << i << " = \"" << string << "\";\n";
            i++;
        }

        std::stringstream body;
        body << "int main()\n";
        body << "{\n";
        for (const auto &basicBlock : m_cfg.basicBlocks())
        {
            generateBasicBlock(basicBlock, body);
        }
        body << "    return 0;\n";
        body << "}\n";

        std::stringstream footer;

        std::ofstream file(m_filepath);
        file << header.str();
        file << strings.str();
        file << body.str();
        file << footer.str();
        file.close();
    }

    void Generator::generateBasicBlock(const CFGBasicBlock &basicBlock, std::stringstream &stream) const
    {
        stream << "    // Basic block " << basicBlock.id << "\n";
        for (const auto &instruction : basicBlock.instructions)
        {
            generateInstruction(instruction, stream);
        }
    }

    void Generator::generateInstruction(const CFGInstruction &instruction, std::stringstream &stream) const
    {
        stream << "    // Instruction "
               << "\n";
        switch (instruction.opcode)
        {
        case Opcode::PrintLn:
        {
            stream << "    printf(\"%s\\n\", string_" << instruction.operands[0] << ");\n";
            break;
        }
        }
    }
}