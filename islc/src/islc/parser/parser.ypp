%{
extern int yylex();
extern int yylineno;
extern const char *yytext;
extern int yyerror(const char *s);

#include "islc/parser/nodestore.h"

islc::NodeStore* nodeStore = nullptr;
%}

%token FUNCTION IDENTIFIER PRINTLN STRING_LITERAL FOR IN INT_LITERAL
%left '+' '-'
%left '(' ')'
%left '{' '}'
%left ';'

%%

program : global_list {
    $$ = nodeStore->addNode(islc::NodeType::Program, "", {$1});
    nodeStore->setRoot($$);
};

global_list : global_list global_declaration {
    $$ = nodeStore->addNode(islc::NodeType::GlobalList, "", {$1, $2});
} | global_declaration {
    $$ = $1;
};

global_declaration : function_declaration {
    $$ = $1;
};

function_declaration : FUNCTION identifier '(' ')' block {
    $$ = nodeStore->addNode(islc::NodeType::FunctionDeclaration, "", {$2, $5});
};

statement_list : statement_list statement {
    $$ = nodeStore->addNode(islc::NodeType::StatementList, "", {$1, $2});
} | statement {
    $$ = $1;
};

statement : println_statement ';' {
    $$ = $1;
}
| function_call ';'{
    $$ = $1;
}
| for_statement {
    $$ = $1;
}
| block {
    $$ = $1;
};

println_statement : PRINTLN '(' string_literal ')' {
    $$ = nodeStore->addNode(islc::NodeType::PrintLnStatement, "", {$3});
};

for_statement : FOR identifier IN range block {
    $$ = nodeStore->addNode(islc::NodeType::ForRangeStatement, "", {$2, $4, $5 });
};

expression : expression '+' expression {
    $$ = nodeStore->addNode(islc::NodeType::Expression, "+", {$1, $3});
} | expression '-' expression {
    $$ = nodeStore->addNode(islc::NodeType::Expression, "-", {$1, $3});
} | range {
    $$ = $1;
} | identifier {
    $$ = $1;
} | function_call {
    $$ = $1;
} | int_literal {
    $$ = $1;
};

block : '{' statement_list '}' {
    $$ = $2;
};

function_call : identifier '(' ')' {
    $$ = nodeStore->addNode(islc::NodeType::FunctionCall, "", {$1});
};

identifier : IDENTIFIER {
    $$ = nodeStore->addNode(islc::NodeType::IdentifierData, yytext, {});
};

string_literal : STRING_LITERAL {
    $$ = nodeStore->addNode(islc::NodeType::StringData, yytext, {});
};

int_literal : INT_LITERAL {
    $$ = nodeStore->addNode(islc::NodeType::IntData, yytext, {});
};

range : expression '.''.' expression {
    $$ = nodeStore->addNode(islc::NodeType::Range, "", {$1, $4});
};

%%